{
  "address": "0x9cC4a49667928Cba39BBb9d271BAC6736B122516",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_brevisRequest",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "blockNum",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint248",
          "name": "amount",
          "type": "uint248"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useAmount0",
          "type": "bool"
        }
      ],
      "name": "DepthAttested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_appVkHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_appCircuitOutputs",
          "type": "bytes[]"
        }
      ],
      "name": "brevisBatchCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_appVkHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_appCircuitOutput",
          "type": "bytes"
        }
      ],
      "name": "brevisCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "brevisRequest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "o",
          "type": "bytes"
        }
      ],
      "name": "mockDecode",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "blockNum",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint248",
          "name": "amount",
          "type": "uint248"
        },
        {
          "internalType": "bool",
          "name": "useAmount0",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_vkHash",
          "type": "bytes32"
        }
      ],
      "name": "setVkHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vkHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ce4e2d340bd6a359413e73a679602f4a0bfb6cec6f88e35792188b481133e3d",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x9cC4a49667928Cba39BBb9d271BAC6736B122516",
    "transactionIndex": 22,
    "gasUsed": "446880",
    "logsBloom": "0x
    "blockHash": "0xa046319ffbae980b05c281ac568c10e12404424c32063b3373ebbeb41f5c9c2a",
    "transactionHash": "0x4ce4e2d340bd6a359413e73a679602f4a0bfb6cec6f88e35792188b481133e3d",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 7215100,
        "transactionHash": "0x4ce4e2d340bd6a359413e73a679602f4a0bfb6cec6f88e35792188b481133e3d",
        "address": "0x9cC4a49667928Cba39BBb9d271BAC6736B122516",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0xa046319ffbae980b05c281ac568c10e12404424c32063b3373ebbeb41f5c9c2a"
      }
    ],
    "blockNumber": 7215100,
    "cumulativeGasUsed": "2817555",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa082F86d9d1660C29cf3f962A31d7D20E367154F"
  ],
  "numDeployments": 1,
  "solcInputHash": "5d1c75967d38fd8da9d59b1bfd589180",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_brevisRequest\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint248\",\"name\":\"amount\",\"type\":\"uint248\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useAmount0\",\"type\":\"bool\"}],\"name\":\"DepthAttested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_appVkHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_appCircuitOutputs\",\"type\":\"bytes[]\"}],\"name\":\"brevisBatchCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"brevisCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"brevisRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"o\",\"type\":\"bytes\"}],\"name\":\"mockDecode\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"blockNum\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint248\",\"name\":\"amount\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"useAmount0\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_vkHash\",\"type\":\"bytes32\"}],\"name\":\"setVkHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vkHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MendiDepth.sol\":\"MendiDepth\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MendiDepth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./lib/BrevisAppZkOnly.sol\\\";\\n\\n// Only accept ZK-attested results.\\ncontract MendiDepth is BrevisAppZkOnly, Ownable {\\n    event DepthAttested(uint64 blockNum, address pool, uint248 amount, bool useAmount0);\\n\\n    bytes32 public vkHash;\\n\\n    constructor(address _brevisRequest) BrevisAppZkOnly(_brevisRequest) Ownable(msg.sender) {}\\n\\n    // BrevisQuery contract will call our callback once Brevis backend submits the proof.\\n    // This method is called with once the proof is verified.\\n    function handleProofResult(bytes32 _vkHash, bytes calldata _circuitOutput) internal override {\\n        // We need to check if the verifying key that Brevis used to verify the proof\\n        // generated by our circuit is indeed our designated verifying key. This proves\\n        // that the _circuitOutput is authentic\\n        require(vkHash == _vkHash, \\\"invalid vk\\\");\\n        (uint64 blockNum, address pool, uint248 amount, bool useAmount0) = decodeOutput(_circuitOutput);\\n        emit DepthAttested(blockNum, pool, amount, useAmount0);\\n    }\\n\\n    function decodeOutput(bytes calldata o) internal pure returns (uint64 blockNum, address pool, uint248 amount, bool useAmount0) {\\n        blockNum = uint64(bytes8(o[0:8]));\\n        pool  = address(bytes20(o[8:28]));\\n        amount  = uint248(bytes31(o[28:59]));\\n        useAmount0 = uint8(bytes1(o[59:60])) == 1;\\n    }\\n\\n    function setVkHash(bytes32 _vkHash) external onlyOwner {\\n        vkHash = _vkHash;\\n    }\\n\\n    function mockDecode(bytes calldata o) external pure returns (uint64 blockNum, address pool, uint248 amount, bool useAmount0) {\\n       return decodeOutput(o);\\n    }\\n}\\n\",\"keccak256\":\"0xfbe0310013ca5b5484a7723274155841c65258b347a1d516a39a42522c70ff6a\",\"license\":\"MIT\"},\"contracts/lib/BrevisAppZkOnly.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n// App that only accepts ZK-attested results.\\nabstract contract BrevisAppZkOnly {\\n    address public brevisRequest;\\n\\n    modifier onlyBrevisRequest() {\\n        require(msg.sender == brevisRequest, \\\"invalid caller\\\");\\n        _;\\n    }\\n\\n    constructor(address _brevisRequest) {\\n        brevisRequest = _brevisRequest;\\n    }\\n\\n    function handleProofResult(bytes32 _vkHash, bytes calldata _appCircuitOutput) internal virtual {\\n        // to be overrided by custom app\\n    }\\n\\n    function brevisCallback(bytes32 _appVkHash, bytes calldata _appCircuitOutput) external onlyBrevisRequest {\\n        handleProofResult(_appVkHash, _appCircuitOutput);\\n    }\\n\\n    function brevisBatchCallback(\\n        bytes32[] calldata _appVkHashes,\\n        bytes[] calldata _appCircuitOutputs\\n    ) external onlyBrevisRequest {\\n        for (uint i = 0; i < _appVkHashes.length; i++) {\\n            handleProofResult(_appVkHashes[i], _appCircuitOutputs[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87d19d0a3c1544a69a075915b04dd999406664c01566c60c570ef8a4c526faf7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100cb57601f61072038819003918201601f19168301916001600160401b038311848410176100d0578084926020946040528339810103126100cb57516001600160a01b0390818116908190036100cb57600080546001600160a01b0319908116909217905533156100b257600154903390821617600155604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a361063990816100e78239f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816338931a31146103df575080633bca02fc146102e95780634fe840f5146102ca578063715018a6146102625780637859f6d91461024057806379d6b6a2146101ee5780638da5cb5b146101c25780639711b89d146101245763f2fde38b1461008757600080fd5b34610120576020366003190112610120578135916001600160a01b039182841680940361011c576100b6610466565b83156101065750506001548273ffffffffffffffffffffffffffffffffffffffff19821617600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b5082346101bf5760203660031901126101bf5782359067ffffffffffffffff82116101bf575061015d6101bb9361016392369101610438565b90610492565b935167ffffffffffffffff90931683526001600160a01b0390911660208301527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16604082015290151560608201529081906080820190565b0390f35b80fd5b8382346101ea57816003193601126101ea576020906001600160a01b03600154169051908152f35b5080fd5b5034610120573660031901126101ea576024359067ffffffffffffffff82116101205761022161023d9236908301610438565b916102376001600160a01b0386541633146104d7565b35610523565b80f35b5050346101ea5760203660031901126101ea5761025b610466565b3560025580f35b83346101bf57806003193601126101bf5761027b610466565b806001600160a01b0360015473ffffffffffffffffffffffffffffffffffffffff198116600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8382346101ea57816003193601126101ea576020906002549051908152f35b5034610120573660031901126101ea5767ffffffffffffffff9080358281116103db576103199036908301610402565b91909260249384358281116103d7576103359036908501610402565b9061034b6001600160a01b0389541633146104d7565b875b868110610358578880f35b8060051b838210156103c55780830135601e19843603018112156103c15783018035908782116103bd5760200181360381136103bd5761039a92870135610523565b60001981146103ab5760010161034d565b634e487b7160e01b8952601186528789fd5b8b80fd5b8a80fd5b634e487b7160e01b8a5260328752888afd5b8680fd5b8380fd5b8490346101ea57816003193601126101ea576001600160a01b0360209254168152f35b9181601f840112156104335782359167ffffffffffffffff8311610433576020808501948460051b01011161043357565b600080fd5b9181601f840112156104335782359167ffffffffffffffff8311610433576020838186019501011161043357565b6001600160a01b0360015416330361047a57565b60405163118cdaa760e01b8152336004820152602490fd5b908060081161043357813560c01c9281601c1161043357600883013560601c9282603b1161043357601c81013560081c92603c1161043357603b013560f81c60011490565b156104de57565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642063616c6c65720000000000000000000000000000000000006044820152606490fd5b919091600254036105be5761055c6105b9917f90ed365d200a27a77e5eb3cc961698ebc25673ac0aa30054f53931f683fad3d393610492565b6040805167ffffffffffffffff90951685526001600160a01b0390931660208501527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90911691830191909152151560608201529081906080820190565b0390a1565b60405162461bcd60e51b815260206004820152600a60248201527f696e76616c696420766b000000000000000000000000000000000000000000006044820152606490fdfea2646970667358221220b8137d5266841e302ce6ea74a65eb270561193c038dc18cb1d239b8f9eb91e6964736f6c63430008140033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816338931a31146103df575080633bca02fc146102e95780634fe840f5146102ca578063715018a6146102625780637859f6d91461024057806379d6b6a2146101ee5780638da5cb5b146101c25780639711b89d146101245763f2fde38b1461008757600080fd5b34610120576020366003190112610120578135916001600160a01b039182841680940361011c576100b6610466565b83156101065750506001548273ffffffffffffffffffffffffffffffffffffffff19821617600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b5082346101bf5760203660031901126101bf5782359067ffffffffffffffff82116101bf575061015d6101bb9361016392369101610438565b90610492565b935167ffffffffffffffff90931683526001600160a01b0390911660208301527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16604082015290151560608201529081906080820190565b0390f35b80fd5b8382346101ea57816003193601126101ea576020906001600160a01b03600154169051908152f35b5080fd5b5034610120573660031901126101ea576024359067ffffffffffffffff82116101205761022161023d9236908301610438565b916102376001600160a01b0386541633146104d7565b35610523565b80f35b5050346101ea5760203660031901126101ea5761025b610466565b3560025580f35b83346101bf57806003193601126101bf5761027b610466565b806001600160a01b0360015473ffffffffffffffffffffffffffffffffffffffff198116600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8382346101ea57816003193601126101ea576020906002549051908152f35b5034610120573660031901126101ea5767ffffffffffffffff9080358281116103db576103199036908301610402565b91909260249384358281116103d7576103359036908501610402565b9061034b6001600160a01b0389541633146104d7565b875b868110610358578880f35b8060051b838210156103c55780830135601e19843603018112156103c15783018035908782116103bd5760200181360381136103bd5761039a92870135610523565b60001981146103ab5760010161034d565b634e487b7160e01b8952601186528789fd5b8b80fd5b8a80fd5b634e487b7160e01b8a5260328752888afd5b8680fd5b8380fd5b8490346101ea57816003193601126101ea576001600160a01b0360209254168152f35b9181601f840112156104335782359167ffffffffffffffff8311610433576020808501948460051b01011161043357565b600080fd5b9181601f840112156104335782359167ffffffffffffffff8311610433576020838186019501011161043357565b6001600160a01b0360015416330361047a57565b60405163118cdaa760e01b8152336004820152602490fd5b908060081161043357813560c01c9281601c1161043357600883013560601c9282603b1161043357601c81013560081c92603c1161043357603b013560f81c60011490565b156104de57565b60405162461bcd60e51b815260206004820152600e60248201527f696e76616c69642063616c6c65720000000000000000000000000000000000006044820152606490fd5b919091600254036105be5761055c6105b9917f90ed365d200a27a77e5eb3cc961698ebc25673ac0aa30054f53931f683fad3d393610492565b6040805167ffffffffffffffff90951685526001600160a01b0390931660208501527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90911691830191909152151560608201529081906080820190565b0390a1565b60405162461bcd60e51b815260206004820152600a60248201527f696e76616c696420766b000000000000000000000000000000000000000000006044820152606490fdfea2646970667358221220b8137d5266841e302ce6ea74a65eb270561193c038dc18cb1d239b8f9eb91e6964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 348,
        "contract": "contracts/MendiDepth.sol:MendiDepth",
        "label": "brevisRequest",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8,
        "contract": "contracts/MendiDepth.sol:MendiDepth",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 197,
        "contract": "contracts/MendiDepth.sol:MendiDepth",
        "label": "vkHash",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      }
    }
  }
}